import React from "react";
import ProjectCard from "./ProjectCard";
import "./Projects.css";

const Projects = () => {
  return (
    <section className="projects-section">
      <h2>Mes Projets</h2>
      <div className="projects-container">
        <ProjectCard
          title="Task it"
          videoSrc="/src/assets/video/taskit.mp4"
          description="Jâ€™ai eu lâ€™idÃ©e de Task It, une application web en Ruby on Rails conÃ§ue pour simplifier la vie quotidienne. On a tous des to-do lists manuscrites qui traÃ®nent â€” sur le frigo, dans un sac, ou sur le bureau. Pareil pour les rappels de rendez-vous, souvent griffonnÃ©s sur des petits post-it par le dentiste ou le mÃ©decin.

 Lâ€™objectif : pouvoir scanner une to-do list ou une carte de rendez-vous Ã©crite Ã  la main, et les retrouver en version numÃ©rique dans son tÃ©lÃ©phone â€” idÃ©al pour ne plus oublier les courses ou un rendez-vous chez le dentiste !

Et voici comment :
> Au dÃ©part, jâ€™ai rÃ©alisÃ© un premier design trÃ¨s rapide sur Figma, puis je me suis surtout concentrÃ©e sur la partie back-end :

OCR & Intelligence Artificielle :
 > Jâ€™ai intÃ©grÃ© lâ€™API dâ€™OpenAI pour extraire les tÃ¢ches et rappels Ã  partir des images. Pour cela, jâ€™ai mis en place deux Services Rails distincts :
- un pour lâ€™analyse des to-do lists,
- un autre pour les rappels avec dates et heures.
ðŸ‘‰ En Rails, un service est une classe dÃ©diÃ©e Ã  une logique mÃ©tier complexe, sÃ©parÃ©e des modÃ¨les et des contrÃ´leurs â€” ici, il contient le prompt envoyÃ© Ã  OpenAI et le traitement de la rÃ©ponse.

Traitement asynchrone avec les jobs :
 > Jâ€™ai utilisÃ© des Active Jobs pour lancer le traitement OCR en arriÃ¨re-plan.
ðŸ‘‰ Un job en Rails permet dâ€™exÃ©cuter du code en tÃ¢che de fond, sans bloquer lâ€™expÃ©rience utilisateur â€” utile pour analyser une image ou afficher un loader.

Turbo et mise Ã  jour en temps rÃ©el :
 GrÃ¢ce Ã  Turbo Stream, les rÃ©sultats sâ€™affichent instantanÃ©ment dÃ¨s quâ€™ils sont disponibles, sans rechargement de page.

Helpers :
 > Jâ€™ai aussi crÃ©Ã© des Helpers, pour afficher dynamiquement une image selon la catÃ©gorie dâ€™une liste â€” un petit dÃ©tail qui rend lâ€™interface plus intuitive et cohÃ©rente.

Le projet a Ã©tÃ© mis en ligne sur Heroku (lâ€™app nâ€™est plus accessible aujourdâ€™hui).

Un grand merci Ã  mes coÃ©quipiers :
Donovan Trigant pour le front-end,
Thibault Charron (aka Thirbo) pour tout ce qui est Turbo & interactions,
JB pour la gestion de projet."
        />
        <ProjectCard
          title="Calculateur scientifique"
          videoSrc="/src/assets/video/calculateur-insidetx.mp4"
          description="..."
        />
      </div>
    </section>
  );
};

export default Projects;
